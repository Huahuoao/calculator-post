// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"com.huahuo/app/app/dao/model"
)

func newCalRate(db *gorm.DB, opts ...gen.DOOption) calRate {
	_calRate := calRate{}

	_calRate.calRateDo.UseDB(db, opts...)
	_calRate.calRateDo.UseModel(&model.CalRate{})

	tableName := _calRate.calRateDo.TableName()
	_calRate.ALL = field.NewAsterisk(tableName)
	_calRate.ID = field.NewInt32(tableName, "id")
	_calRate.Duration = field.NewString(tableName, "duration")
	_calRate.Rate = field.NewString(tableName, "rate")
	_calRate.Type = field.NewInt32(tableName, "type")
	_calRate.Num = field.NewInt32(tableName, "num")

	_calRate.fillFieldMap()

	return _calRate
}

type calRate struct {
	calRateDo

	ALL      field.Asterisk
	ID       field.Int32
	Duration field.String
	Rate     field.String
	Type     field.Int32 // 0 save
	Num      field.Int32

	fieldMap map[string]field.Expr
}

func (c calRate) Table(newTableName string) *calRate {
	c.calRateDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calRate) As(alias string) *calRate {
	c.calRateDo.DO = *(c.calRateDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calRate) updateTableName(table string) *calRate {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Duration = field.NewString(table, "duration")
	c.Rate = field.NewString(table, "rate")
	c.Type = field.NewInt32(table, "type")
	c.Num = field.NewInt32(table, "num")

	c.fillFieldMap()

	return c
}

func (c *calRate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calRate) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["duration"] = c.Duration
	c.fieldMap["rate"] = c.Rate
	c.fieldMap["type"] = c.Type
	c.fieldMap["num"] = c.Num
}

func (c calRate) clone(db *gorm.DB) calRate {
	c.calRateDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calRate) replaceDB(db *gorm.DB) calRate {
	c.calRateDo.ReplaceDB(db)
	return c
}

type calRateDo struct{ gen.DO }

type ICalRateDo interface {
	gen.SubQuery
	Debug() ICalRateDo
	WithContext(ctx context.Context) ICalRateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalRateDo
	WriteDB() ICalRateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalRateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalRateDo
	Not(conds ...gen.Condition) ICalRateDo
	Or(conds ...gen.Condition) ICalRateDo
	Select(conds ...field.Expr) ICalRateDo
	Where(conds ...gen.Condition) ICalRateDo
	Order(conds ...field.Expr) ICalRateDo
	Distinct(cols ...field.Expr) ICalRateDo
	Omit(cols ...field.Expr) ICalRateDo
	Join(table schema.Tabler, on ...field.Expr) ICalRateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalRateDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalRateDo
	Group(cols ...field.Expr) ICalRateDo
	Having(conds ...gen.Condition) ICalRateDo
	Limit(limit int) ICalRateDo
	Offset(offset int) ICalRateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalRateDo
	Unscoped() ICalRateDo
	Create(values ...*model.CalRate) error
	CreateInBatches(values []*model.CalRate, batchSize int) error
	Save(values ...*model.CalRate) error
	First() (*model.CalRate, error)
	Take() (*model.CalRate, error)
	Last() (*model.CalRate, error)
	Find() ([]*model.CalRate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalRate, err error)
	FindInBatches(result *[]*model.CalRate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CalRate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalRateDo
	Assign(attrs ...field.AssignExpr) ICalRateDo
	Joins(fields ...field.RelationField) ICalRateDo
	Preload(fields ...field.RelationField) ICalRateDo
	FirstOrInit() (*model.CalRate, error)
	FirstOrCreate() (*model.CalRate, error)
	FindByPage(offset int, limit int) (result []*model.CalRate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalRateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calRateDo) Debug() ICalRateDo {
	return c.withDO(c.DO.Debug())
}

func (c calRateDo) WithContext(ctx context.Context) ICalRateDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calRateDo) ReadDB() ICalRateDo {
	return c.Clauses(dbresolver.Read)
}

func (c calRateDo) WriteDB() ICalRateDo {
	return c.Clauses(dbresolver.Write)
}

func (c calRateDo) Session(config *gorm.Session) ICalRateDo {
	return c.withDO(c.DO.Session(config))
}

func (c calRateDo) Clauses(conds ...clause.Expression) ICalRateDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calRateDo) Returning(value interface{}, columns ...string) ICalRateDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calRateDo) Not(conds ...gen.Condition) ICalRateDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calRateDo) Or(conds ...gen.Condition) ICalRateDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calRateDo) Select(conds ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calRateDo) Where(conds ...gen.Condition) ICalRateDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calRateDo) Order(conds ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calRateDo) Distinct(cols ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calRateDo) Omit(cols ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calRateDo) Join(table schema.Tabler, on ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calRateDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calRateDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calRateDo) Group(cols ...field.Expr) ICalRateDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calRateDo) Having(conds ...gen.Condition) ICalRateDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calRateDo) Limit(limit int) ICalRateDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calRateDo) Offset(offset int) ICalRateDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calRateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalRateDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calRateDo) Unscoped() ICalRateDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calRateDo) Create(values ...*model.CalRate) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calRateDo) CreateInBatches(values []*model.CalRate, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calRateDo) Save(values ...*model.CalRate) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calRateDo) First() (*model.CalRate, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalRate), nil
	}
}

func (c calRateDo) Take() (*model.CalRate, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalRate), nil
	}
}

func (c calRateDo) Last() (*model.CalRate, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalRate), nil
	}
}

func (c calRateDo) Find() ([]*model.CalRate, error) {
	result, err := c.DO.Find()
	return result.([]*model.CalRate), err
}

func (c calRateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalRate, err error) {
	buf := make([]*model.CalRate, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calRateDo) FindInBatches(result *[]*model.CalRate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calRateDo) Attrs(attrs ...field.AssignExpr) ICalRateDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calRateDo) Assign(attrs ...field.AssignExpr) ICalRateDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calRateDo) Joins(fields ...field.RelationField) ICalRateDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calRateDo) Preload(fields ...field.RelationField) ICalRateDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calRateDo) FirstOrInit() (*model.CalRate, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalRate), nil
	}
}

func (c calRateDo) FirstOrCreate() (*model.CalRate, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalRate), nil
	}
}

func (c calRateDo) FindByPage(offset int, limit int) (result []*model.CalRate, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calRateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calRateDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calRateDo) Delete(models ...*model.CalRate) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calRateDo) withDO(do gen.Dao) *calRateDo {
	c.DO = *do.(*gen.DO)
	return c
}
